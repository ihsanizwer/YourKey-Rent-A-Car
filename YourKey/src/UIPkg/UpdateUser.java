/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIPkg;

import DBCon.DBConnection;
import Validations.ValidateMe;
import java.awt.Color;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Ihsan Izwer
 */
public class UpdateUser extends javax.swing.JFrame {

    /**
     * Creates new form UpdateUser
     */
    
    private Vector usernames;
    
    
    public UpdateUser(){

        initComponents();

        this.setSize(820, 512);
        this.setLocationRelativeTo(null);

        
        usernames = new Vector();
        
        DBConnection db = new DBConnection("SELECT * FROM users;",1);
        ResultSet rs = db.getRS();
        int i =0;
       
        try {
            while(rs.next()){
                usernames.add(i,rs.getNString("username"));
                usrCmb.addItem(usernames.get(i)+" | "+rs.getNString("name")+" | "+rs.getNString("permissions")); 
                i++;
            }
             
            db.closeCon();

        } catch (SQLException ex) {
            Logger.getLogger(UpdateUser.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("carr?autoReconnect=true&useSSL=falsePU").createEntityManager();
        usersQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT u FROM Users u");
        usersList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : usersQuery.getResultList();
        usersQuery1 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT u FROM Users u");
        usersList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : usersQuery1.getResultList();
        usersQuery2 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT u FROM Users u");
        usersList2 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : usersQuery2.getResultList();
        usrCmb = new javax.swing.JComboBox<>();
        recLbl = new javax.swing.JLabel();
        pwdChk = new javax.swing.JCheckBox();
        perCmb = new javax.swing.JComboBox<>();
        chkPermission = new javax.swing.JCheckBox();
        nameChk = new javax.swing.JCheckBox();
        usrChk = new javax.swing.JCheckBox();
        usrTxt = new javax.swing.JTextField();
        pwdTxt = new javax.swing.JTextField();
        nameTxt = new javax.swing.JTextField();
        closeBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        titleLbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        usrCmb.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        usrCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usrCmbActionPerformed(evt);
            }
        });
        getContentPane().add(usrCmb);
        usrCmb.setBounds(370, 90, 410, 30);

        recLbl.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        recLbl.setText("Select Record :");
        getContentPane().add(recLbl);
        recLbl.setBounds(150, 80, 220, 40);

        pwdChk.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        pwdChk.setText("Edit password");
        pwdChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdChkActionPerformed(evt);
            }
        });
        getContentPane().add(pwdChk);
        pwdChk.setBounds(150, 180, 240, 40);

        perCmb.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        perCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "admin", "manager", "receptionist" }));
        perCmb.setEnabled(false);
        getContentPane().add(perCmb);
        perCmb.setBounds(390, 290, 250, 30);

        chkPermission.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        chkPermission.setText("Edit Permissions");
        chkPermission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPermissionActionPerformed(evt);
            }
        });
        getContentPane().add(chkPermission);
        chkPermission.setBounds(120, 280, 270, 40);

        nameChk.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        nameChk.setText("Edit Name");
        nameChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameChkActionPerformed(evt);
            }
        });
        getContentPane().add(nameChk);
        nameChk.setBounds(200, 230, 190, 40);

        usrChk.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        usrChk.setText("Edit Username");
        usrChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usrChkActionPerformed(evt);
            }
        });
        getContentPane().add(usrChk);
        usrChk.setBounds(140, 130, 250, 40);

        usrTxt.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        usrTxt.setEnabled(false);
        getContentPane().add(usrTxt);
        usrTxt.setBounds(390, 140, 250, 30);

        pwdTxt.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pwdTxt.setEnabled(false);
        getContentPane().add(pwdTxt);
        pwdTxt.setBounds(390, 190, 250, 30);

        nameTxt.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        nameTxt.setEnabled(false);
        getContentPane().add(nameTxt);
        nameTxt.setBounds(390, 240, 250, 30);

        closeBtn.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        closeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/icons/x-mark-32.png"))); // NOI18N
        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(closeBtn);
        closeBtn.setBounds(670, 20, 120, 40);

        updateBtn.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/icons/Material Icons_e7fe(0)_64.png"))); // NOI18N
        updateBtn.setText("Update Record");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(updateBtn);
        updateBtn.setBounds(310, 350, 290, 70);

        titleLbl.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        titleLbl.setText("Update users");
        getContentPane().add(titleLbl);
        titleLbl.setBounds(20, 0, 260, 70);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/bac.jpeg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(4, -6, 820, 520);

        setBounds(0, 0, 836, 551);
    }// </editor-fold>//GEN-END:initComponents

    private void usrChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usrChkActionPerformed
        if(usrChk.isSelected()==true){
            usrTxt.setEnabled(true);
        }else{
            usrTxt.setText("");
            usrTxt.setEnabled(false);
        }
    }//GEN-LAST:event_usrChkActionPerformed

    private void pwdChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdChkActionPerformed
        if(pwdChk.isSelected()==true){
            pwdTxt.setEnabled(true);
        }else{
            pwdTxt.setText("");
            pwdTxt.setEnabled(false);
        }
    }//GEN-LAST:event_pwdChkActionPerformed

    private void nameChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameChkActionPerformed
        if(nameChk.isSelected()==true){
            nameTxt.setEnabled(true);
        }else{
            nameTxt.setText("");
            nameTxt.setEnabled(false);
        }
    }//GEN-LAST:event_nameChkActionPerformed

    private void chkPermissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPermissionActionPerformed
        if(chkPermission.isSelected()==true){
            perCmb.setEnabled(true);
        }else{
            perCmb.setEnabled(false);
        }
    }//GEN-LAST:event_chkPermissionActionPerformed

    private void usrCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usrCmbActionPerformed
        
    }//GEN-LAST:event_usrCmbActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        new AdminScreen().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        String selectedUser = usernames.get(usrCmb.getSelectedIndex()).toString();
        String disp ="Previous record : ";
        ValidateMe vm = new ValidateMe();
        
        DBConnection d = new DBConnection("SELECT * FROM users WHERE username LIKE '"+selectedUser+"'",1);
        ResultSet r = d.getRS();
        try {
            while(r.next()){
                disp =disp+r.getNString("username") +" | ";
                disp =disp+r.getNString("name") + " | ";
                disp =disp+r.getNString("permissions");
            }
            disp = disp+"\n";
            d.closeCon();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateUser.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(usrChk.isSelected()){
            String newUsername = usrTxt.getText();
            if(vm.isValidUsername(newUsername)){
                DBConnection db = new DBConnection("UPDATE users SET username ='"+newUsername+"' WHERE username LIKE '"+selectedUser+"'", 2);
                disp=disp+"Username updated to : "+newUsername+".";
                db.closeCon();
            }
        }
        if(pwdChk.isSelected()){
            String newPassword = pwdTxt.getText();
            if(vm.isValidPassword(newPassword)){
                DBConnection db = new DBConnection("UPDATE users SET password ='"+newPassword+"' WHERE username LIKE '"+selectedUser+"'", 2);
                disp=disp+"Password updated to : "+newPassword+".";
                db.closeCon();
            }
        }
        if(nameChk.isSelected()){
            String newName = nameTxt.getText();
            if(vm.isValidName(newName)){
                DBConnection db = new DBConnection("UPDATE users SET name ='"+newName+"' WHERE username LIKE '"+selectedUser+"'", 2);
                disp=disp+"Name updated to : "+newName+".";
                db.closeCon();
            }
        }
        if(chkPermission.isSelected()){
            String newPermission = perCmb.getSelectedItem().toString();
            DBConnection db = new DBConnection("UPDATE users SET permissions ='"+newPermission+"' WHERE username LIKE '"+selectedUser+"'", 2);
            disp=disp+"Permissions updated to : "+newPermission;
            db.closeCon();
        }
        
        if(usrChk.isSelected() | pwdChk.isSelected() | nameChk.isSelected() | chkPermission.isSelected()){
            JOptionPane.showMessageDialog(null, disp);
        }else{
            JOptionPane.showMessageDialog(null, "No updation was made!");
        }
        usrChk.setSelected(false);
        pwdChk.setSelected(false);
        nameChk.setSelected(false);
        chkPermission.setSelected(false);
        usrTxt.setText("");
        pwdTxt.setText("");
        nameTxt.setText("");
        perCmb.setSelectedIndex(0);
        usrTxt.setEnabled(false);
        pwdTxt.setEnabled(false);
        nameTxt.setEnabled(false);
        perCmb.setEnabled(false);
        
        DBConnection db = new DBConnection("SELECT * FROM users;",1);
        ResultSet rs = db.getRS();
        int i =0;
        usrCmb.removeAllItems();
        try {
            while(rs.next()){
                usernames.add(i,rs.getNString("username"));
                usrCmb.addItem(usernames.get(i)+" | "+rs.getNString("name")+" | "+rs.getNString("permissions")); 
                i++;
            }
             
            db.closeCon();

        } catch (SQLException ex) {
            Logger.getLogger(UpdateUser.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       usrCmb.setSelectedIndex(0);
    }//GEN-LAST:event_updateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkPermission;
    private javax.swing.JButton closeBtn;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox nameChk;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JComboBox<String> perCmb;
    private javax.swing.JCheckBox pwdChk;
    private javax.swing.JTextField pwdTxt;
    private javax.swing.JLabel recLbl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JButton updateBtn;
    private java.util.List<UIPkg.Users> usersList;
    private java.util.List<UIPkg.Users> usersList1;
    private java.util.List<UIPkg.Users> usersList2;
    private javax.persistence.Query usersQuery;
    private javax.persistence.Query usersQuery1;
    private javax.persistence.Query usersQuery2;
    private javax.swing.JCheckBox usrChk;
    private javax.swing.JComboBox<String> usrCmb;
    private javax.swing.JTextField usrTxt;
    // End of variables declaration//GEN-END:variables
}
